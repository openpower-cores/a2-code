#!/usr/bin/python
# coding: utf-8
# Â© IBM Corp. 2020
# Licensed under and subject to the terms of the CC-BY 4.0
# license (https://creativecommons.org/licenses/by/4.0/legalcode). 
# Additional rights, including the right to physically implement a softcore 
# that is compliant with the required sections of the Power ISA 
# Specification, will be available at no cost via the OpenPOWER Foundation. 
# This README will be updated with additional information when OpenPOWER's 
# license is available.

#
# convert dump file (addr8 data4 format) to tcl script for jtag memory load
#

import argparse

inFile = 'image-test.dmp'
outFile = 'image.tcl'
reverse = True        # byte-reverse words
blockSize = 128       # maximum block size for writes

parser = argparse.ArgumentParser(description='Convert addr/data format to tcl.')
parser.add_argument('-f', action='store', dest='inFile')
parser.add_argument('-o', action='store', dest='outFile')
parser.add_argument('-b', action='store', dest='blockSize')
parser.add_argument('-r', action='store', dest='reverse')
args = parser.parse_args()

if args.inFile is not None:
  inFile = args.inFile

if args.outFile is not None:
  outFile = args.outFile
  
if args.blockSize is not None:
  blockSize = int(args.blockSize)
  
if args.reverse is not None:
  reverse = args.reverse != '0'
 
def d2x(x, w=None):
  if w is None:
    return '{0:X}'.format(x)
  else:
    return '{0:0{l}X}'.format(x, l=w)
    
def x2d(i):
  return int(i, 16)
  
 # unsparse data into full block
def addCmd(block):
   if len(block) == 0:
      return
   start = int(block[0][0]/blockSize) * blockSize
   end = start + blockSize
   data = ''

   addr = start
   for i in range(len(block)):
      waddr = block[i][0]
      wdata = block[i][1]
      for j in range(addr, waddr, 4):
         data += ' ' + '00000000'
      data += ' ' + wdata
      addr = waddr + 4
   for j in range(waddr+4, end, 4):
      data += ' ' + '00000000'
      
   cmd = 'waxi ' + d2x(start, 8) + ' {' + data + '} ' + str(blockSize/4)
   outLines.append('# ' + d2x(start, 8) + ':' + d2x(end-1, 8))
   outLines.append(cmd)

dumpData = []    
outLines = []

start = 0
with open(inFile, "rb") as f:
  while True:
   line = f.readline()
   if not line:
     break
   tokens = line.split()     
   addr = tokens[0]
   data = tokens[1]
   dumpData.append([addr,data])
      
print('Read ' + str(len(dumpData)) + ' words from ' + inFile + '.')

# find sparse blocks
blockStart = 0
blockEnd = blockSize - 4
blockData = []
blocks = 0
for i in range(len(dumpData)):
   addr = x2d(dumpData[i][0])
   data = dumpData[i][1]
   if reverse:
      data = data[6] + data[7] + data[4] + data[5] + data[2] + data[3] + data[0] + data[1]
   if addr == blockEnd:                        # reached end of current block -> complete it
      blockData.append([addr, data])
      addCmd(blockData)
      blockStart += blockSize
      blockEnd = blockStart + blockSize - 4
      blockData = [] 
      blocks += 1
   elif addr > blockEnd:                       # past end of current block -> complete last and start new
      addCmd(blockData)    
      blockStart = int(addr/blockSize) * blockSize
      blockEnd = blockStart + blockSize - 4
      blockData = [[addr, data]]      
      blocks += 1
   else:                                       # add data
      blockData.append([addr, data])

# last one partial
if len(blockData) > 0:  
   addCmd(blockData)    
   blocks += 1
 
print('Created ' + str(blocks) + ' commands for len=' + str(blockSize) + 'B')

f = open(outFile, 'w')
f.write('# created by dmp2tcl from ' + inFile + '\n')
f.write('#'+ '\n')
f.write('# read: ' + str(len(dumpData)) + ' words   created: ' + str(blocks) + ' blocks (' + str(blockSize) + 'B)'+ '\n')
f.write('#'+ '\n')
for i in range(len(outLines)):
   f.write(outLines[i]+ '\n')
f.close()

print('Created ' + outFile + '.')
     
